/******************************************************************************
File:           DataPump_Publication_Domain.sql
Name:           DataPump_Publication_Domain

BIDW\EDL\Database Projects\Control\DataPump\Domain\DataPump_Publication_Domain.sql

Purpose:        This file is used to manage the meta data needed by pubsub.

Parameters:     

  ,@Verbose     

  ,@PassVerbose 


Execution:      N/A

Called By:      QA

Author:         ffortunato
Date:           20161206

*******************************************************************************
       Change History
*******************************************************************************
Date      Author         Description
--------  -------------  ------------------------------------------------------

20161206  ffortunato     initial iteration
20170126  ffortunato     making changes to service now inserts as well.
20170126  GopiKadambari  Added a statement to insert record into Publication Table

******************************************************************************/

use Control
go

/* Initial cleanup */
/*
delete ctl.contact
delete ctl.distribution
delete ctl.Issue
delete ctl.Subscription
delete ctl.Publication
delete ctl.Publisher
delete ctl.Subscriber
go
*/




-- REf Method
IF NOT EXISTS (SELECT TOP 1 1 FROM ctl.[RefMethod] WHERE [MethodCode] IN ('SS','DLT','TXN'))
BEGIN

	INSERT INTO [ctl].[RefMethod]     ([MethodCode]           ,[MethodName]           ,[MethodDesc]           ,[CreatedBy]  ,[CreatedDtm] )
	VALUES ('SS','Snap Shot','Feed generated using a snaphot method. Staging will require delta processing.',system_user,getdate())

	INSERT INTO [ctl].[RefMethod]     ([MethodCode]           ,[MethodName]           ,[MethodDesc]           ,[CreatedBy]  ,[CreatedDtm] )
	VALUES ('DLT','Delta','Feed generated using a delta method. Only new and updated records are generated.',system_user,getdate())

	INSERT INTO [ctl].[RefMethod]     ([MethodCode]           ,[MethodName]           ,[MethodDesc]           ,[CreatedBy]  ,[CreatedDtm] )
	VALUES ('TXN','Transaction','Feed generated by delivering all transactions encoutnerd by the source system. Only new records are generated.',system_user,getdate())
END


IF NOT EXISTS (SELECT TOP 1 1 FROM ctl.[RefInterval] WHERE [IntervalCode] IN ('MIN','HR','DLY','MTHLY','YRLY','WKLY'))
BEGIN

	INSERT INTO [ctl].[RefInterval] ([IntervalCode] ,[IntervalName],[IntervalDesc],[SLAFormat],[SLARegEx],[CreatedBy],[CreatedDtm])     VALUES 
	('MIN','Minute','The data feed interval is measured in minutes.','ss','[0-5][0-9]',SYSTEM_USER,GETDATE())
	INSERT INTO [ctl].[RefInterval] ([IntervalCode] ,[IntervalName],[IntervalDesc],[SLAFormat],[SLARegEx],[CreatedBy],[CreatedDtm])     VALUES 
	('HR','Hourly','The data feed interval is measured in hours.','mm:ss','[0-5][0-9]:[0-5][0-9]',SYSTEM_USER,GETDATE())
	INSERT INTO [ctl].[RefInterval] ([IntervalCode] ,[IntervalName],[IntervalDesc],[SLAFormat],[SLARegEx],[CreatedBy],[CreatedDtm])     VALUES 
	('DLY','Daily','The data feed interval is measured in days.','hh:mm:ss','([01]?[0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]',SYSTEM_USER,GETDATE())
	INSERT INTO [ctl].[RefInterval] ([IntervalCode] ,[IntervalName],[IntervalDesc],[SLAFormat],[SLARegEx],[CreatedBy],[CreatedDtm])     VALUES 
	('MTHLY','Monthly','The data feed interval is measured in months.','ddThh:mm','[0-3][0-9]T[0-5][0-9]:[0-5][0-9]',SYSTEM_USER,GETDATE())
	INSERT INTO [ctl].[RefInterval] ([IntervalCode] ,[IntervalName],[IntervalDesc],[SLAFormat],[SLARegEx],[CreatedBy],[CreatedDtm])     VALUES 
	('YRLY','Yearly','The data feed interval is measured in years.','mm-ddThh:mm','(?:0[1-9]|1[012])-[0-3][0-9]T[0-5][0-9]:[0-5][0-9]',SYSTEM_USER,GETDATE())
	INSERT INTO [ctl].[RefInterval] ([IntervalCode] ,[IntervalName],[IntervalDesc],[SLAFormat],[SLARegEx],[CreatedBy],[CreatedDtm])     VALUES 
	('WKLY','Weekly','The data feed interval is measured in weeks.','??','??',SYSTEM_USER,GETDATE())
END
/*  These are the values to use in the future. Makes all intervals the same context (drop the 'ly')
INSERT INTO [ctl].[RefInterval] ([IntervalCode] ,[IntervalName],[IntervalDesc],[SLAFormat],[SLARegEx],[CreatedBy],[CreatedDtm])     VALUES 
('MIN','Minute','The data feed interval is measured in minutes.','ss','[0-5][0-9]',SYSTEM_USER,GETDATE())
INSERT INTO [ctl].[RefInterval] ([IntervalCode] ,[IntervalName],[IntervalDesc],[SLAFormat],[SLARegEx],[CreatedBy],[CreatedDtm])     VALUES 
('HR','Hourly','The data feed interval is measured in hours.','mm:ss','[0-5][0-9]:[0-5][0-9]',SYSTEM_USER,GETDATE())
INSERT INTO [ctl].[RefInterval] ([IntervalCode] ,[IntervalName],[IntervalDesc],[SLAFormat],[SLARegEx],[CreatedBy],[CreatedDtm])     VALUES 
('DAY','Daily','The data feed interval is measured in days.','hh:mm:ss','([01]?[0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]',SYSTEM_USER,GETDATE())
INSERT INTO [ctl].[RefInterval] ([IntervalCode] ,[IntervalName],[IntervalDesc],[SLAFormat],[SLARegEx],[CreatedBy],[CreatedDtm])     VALUES 
('WK','Weekly','The data feed interval is measured in weeks.','??','??',SYSTEM_USER,GETDATE())
INSERT INTO [ctl].[RefInterval] ([IntervalCode] ,[IntervalName],[IntervalDesc],[SLAFormat],[SLARegEx],[CreatedBy],[CreatedDtm])     VALUES 
('MTH','Monthly','The data feed interval is measured in months.','ddThh:mm','[0-3][0-9]T[0-5][0-9]:[0-5][0-9]',SYSTEM_USER,GETDATE())
INSERT INTO [ctl].[RefInterval] ([IntervalCode] ,[IntervalName],[IntervalDesc],[SLAFormat],[SLARegEx],[CreatedBy],[CreatedDtm])     VALUES 
('YR','Yearly','The data feed interval is measured in years.','mm-ddThh:mm','(?:0[1-9]|1[012])-[0-3][0-9]T[0-5][0-9]:[0-5][0-9]',system_user,getdate())
GO
*/


IF NOT EXISTS (SELECT TOP 1 1 FROM ctl.[RefInterface] WHERE [InterfaceCode] IN (/*'FILE','API','TBL',*/'SHARE','FTP','SFTP','CANVAS'))
BEGIN
/*
INSERT INTO [ctl].[RefInterface]([InterfaceCode],[InterfaceName],[InterfaceDesc],[CreatedBy],[CreatedDtm])  VALUES
           ('FILE','File','',system_user,getdate())
INSERT INTO [ctl].[RefInterface]([InterfaceCode],[InterfaceName],[InterfaceDesc],[CreatedBy],[CreatedDtm])  VALUES
           ('API','Application Programming Interface','',system_user,getdate())
INSERT INTO [ctl].[RefInterface]([InterfaceCode],[InterfaceName],[InterfaceDesc],[CreatedBy],[CreatedDtm])  VALUES
           ('TBL','Table','',system_user,getdate())
*/
INSERT INTO [ctl].[RefInterface]([InterfaceCode],[InterfaceName],[InterfaceDesc],[CreatedBy],[CreatedDtm])  VALUES
           ('SHARE','File Share','',system_user,getdate())
INSERT INTO [ctl].[RefInterface]([InterfaceCode],[InterfaceName],[InterfaceDesc],[CreatedBy],[CreatedDtm])  VALUES
           ('FTP','File Transfer Protocol','',system_user,getdate())
INSERT INTO [ctl].[RefInterface]([InterfaceCode],[InterfaceName],[InterfaceDesc],[CreatedBy],[CreatedDtm])  VALUES
           ('SFTP','Secure File Transfer Protocol','',system_user,getdate())
INSERT INTO [ctl].[RefInterface]([InterfaceCode],[InterfaceName],[InterfaceDesc],[CreatedBy],[CreatedDtm])  VALUES
           ('CANVAS','Canvas Sync Command Line Utility','',system_user,getdate())
INSERT INTO [ctl].[RefInterface]([InterfaceCode],[InterfaceName],[InterfaceDesc],[CreatedBy],[CreatedDtm])  VALUES
           ('TBL','Table','System directly interfactions with a relational database table.',system_user,getdate())

set identity_insert Control.ctl.RefInterface on

INSERT INTO [ctl].[RefInterface]([InterfaceId],[InterfaceCode],[InterfaceName],[InterfaceDesc],[CreatedBy],[CreatedDtm])  VALUES
           (-1, 'N/A','Not Applicable','Not Applicable should never be used.',system_user,getdate())

set identity_insert Control.ctl.RefInterface off

END

IF NOT EXISTS (SELECT TOP 1 1 FROM ctl.RefStatus WHERE StatusCode IN ('IP','IS','IC','IF','IA','IN'))
BEGIN
	-- ISSUE STATUSES
	INSERT INTO ctl.RefStatus ([STATUSCODE],[STATUSNAME]
	,[STATUSDESC],[STATUSTYPE]
	,CreatedDtm,CREATEDBY)
	VALUES ('IP','Issue Prepared'
	,'Issue is prepared on the publishing system. The file is ready or table populated.'             ,'Issue'
	,GETDATE(),'ffortunato')
	INSERT INTO ctl.RefStatus ([STATUSCODE],[STATUSNAME]
	,[STATUSDESC],[STATUSTYPE]
	,CreatedDtm,CREATEDBY)
	VALUES ('IS','Issue Staging'
	,'Issue is currently being loaded onto local staging tables.'             ,'Issue'
	,GETDATE(),'ffortunato')

	INSERT INTO ctl.REFSTATUS ([STATUSCODE],[STATUSNAME]
	,[STATUSDESC],[STATUSTYPE]
	,CreatedDtm,CREATEDBY)
	VALUES ('IN','Issue Ready for Notification'
	,'All of the Issues Distributions are ready for notifcation.'   ,'Issue'
	,GETDATE(),'ffortunato')

	INSERT INTO ctl.REFSTATUS ([STATUSCODE],[STATUSNAME]
	,[STATUSDESC],[STATUSTYPE]
	,CreatedDtm,CREATEDBY)
	VALUES ('IC','Issue Complete'
	,'Issue has been consumed by subscribing systems.'   ,'Issue'
	,GETDATE(),'ffortunato')
	INSERT INTO ctl.REFSTATUS ([STATUSCODE],[STATUSNAME]
	,[STATUSDESC],[STATUSTYPE]
	,CreatedDtm,CREATEDBY)
	VALUES ('IF','Issue Failed'
	,'Issue has failed to be consumed by ALL subscribing systems.'   ,'Issue'
	,GETDATE(),'ffortunato')
	INSERT INTO ctl.REFSTATUS ([STATUSCODE],[STATUSNAME]
	,[STATUSDESC],[STATUSTYPE]
	,CreatedDtm,CREATEDBY)
	VALUES ('IA','Issue Archived'
	,'The stage table has been consumed by all subscribers and has been archived and lastly removed from the staging table. The issue, if a file, has been moved to an archive directory.'   ,'Issue'
	,GETDATE(),'ffortunato')
		INSERT INTO ctl.REFSTATUS ([STATUSCODE],[STATUSNAME]
	,[STATUSDESC],[STATUSTYPE]
	,CreatedDtm,CREATEDBY)
	VALUES ('IR','Issue Retry'
	,'The stage table has to be rerun from the begining.'   ,'Issue'
	,GETDATE(),'ffortunato')
			INSERT INTO ctl.REFSTATUS ([STATUSCODE],[STATUSNAME]
	,[STATUSDESC],[STATUSTYPE]
	,CreatedDtm,CREATEDBY)
	VALUES ('IL','Issue Loaded'
	,'??.'   ,'Issue'
	,GETDATE(),'ffortunato')
END

-- Distribution STATUSES
IF NOT EXISTS (SELECT TOP 1 1 FROM ctl.RefStatus WHERE StatusCode IN ('DT','DN','DC','DF'))
BEGIN
	INSERT INTO ctl.RefStatus ([STATUSCODE],[STATUSNAME]
	,[STATUSDESC],[STATUSTYPE]
	,CreatedDtm,CREATEDBY)
	VALUES ('DN','Distribution Awaiting Notification'
	,'Issue record was created and the trigger created a distribution record as well.'             ,'Distribution'
	,GETDATE(),'ffortunato')
	INSERT INTO ctl.RefStatus ([STATUSCODE],[STATUSNAME]
	,[STATUSDESC],[STATUSTYPE]
	,CreatedDtm,CREATEDBY)
	VALUES ('DT','Distribution Notification Sent to Subscriber'
	,'Distribution has been notified to the subscribing systems posting group controls.'             ,'Distribution'
	,GETDATE(),'ffortunato')
	INSERT INTO ctl.REFSTATUS ([STATUSCODE],[STATUSNAME]
	,[STATUSDESC],[STATUSTYPE]
	,CreatedDtm,CREATEDBY)
	VALUES ('DC','Distribution Complete'
	,'Distribution has been consumed by subscribing systems.'   ,'Distribution'
	,GETDATE(),'ffortunato')
	INSERT INTO ctl.REFSTATUS ([STATUSCODE],[STATUSNAME]
	,[STATUSDESC],[STATUSTYPE]
	,CreatedDtm,CREATEDBY)
	VALUES ('DF','Distribution Failed'
	,'Distribution has failed to be consumed by subscribing system.'   ,'Distribution'
	,GETDATE(),'ffortunato')
END

/*
INSERT INTO ctl.REFSTATUS ([STATUSCODE],[STATUSNAME]
,[STATUSDESC],[STATUSTYPE]
,CreatedDtm,CREATEDBY)
VALUES ('ILDW','Issue has Loaded to the DW'
,'The issue has been staged succesfully and loaded to the data warehouse.'   ,'Issue'
,GETDATE(),'ffortunato')
*/

-- select * from ctl.refstatus

IF NOT EXISTS (SELECT TOP 1 1 FROM ctl.Contact WHERE [NAME] IN ('BI-Development','Unknown','Canvas','Campus Vue','BI-Operations'))
BEGIN

	INSERT INTO ctl.Contact([NAME],[EMAIL],[PHONE],[CreatedDtm],CreatedBy) VALUES (
	'BI-Development','DM-Development@bpiedu.com','(877) 300-6069',GETDATE(),'ffortunato')
	INSERT INTO ctl.CONTACT ([NAME],[EMAIL],[PHONE],[CreatedDtm],CreatedBy) VALUES (
	'Unknown','Unknown@Unknown.com','N/A',GETDATE(),'ffortunato')
	INSERT INTO ctl.CONTACT ([NAME],[EMAIL],[PHONE],[CreatedDtm],[CREATEDBY]) VALUES (
	'Canvas','*@.com','720-555-9100',GETDATE(),'ffortunato')
	INSERT INTO ctl.CONTACT ([NAME],[EMAIL],[PHONE],[CreatedDtm],[CREATEDBY]) VALUES (
	'Campus Vue','*@campusvue.com','720-555-9100',GETDATE(),'ffortunato')
	INSERT INTO ctl.CONTACT ([NAME],[EMAIL],[PHONE],[CreatedDtm],[CREATEDBY]) VALUES (
	'BI-Operations','BI-Operations@bpiedu.com','720-555-9100',GETDATE(),'ffortunato')

	INSERT INTO [ctl].[Contact] (Name, Tier, Email, Phone, Address01, Address02, City, State, ZipCode, CreatedBy, CreatedDtm, ModifiedBy, ModifiedDtm)
	VALUES ('ServicePoint', NULL, '*@servicenow.com', '720-555-9100', NULL, NULL, NULL, NULL, NULL, ORIGINAL_LOGIN(), GETDATE(), NULL, NULL)


END




/*
INSERT INTO PUBLISHER
     @p_PUBLISHER_CODE      
    ,@p_CONTACT_NAME        
	,@p_PUBLISHER_NAME      
	,@p_PUBLISHER_TYPE      
	,@p_CREATED_BY          
*/
